generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())
}

model Team {
  id            String         @id @default(uuid())
  name          String         @unique
  coach         String
  stadium       String
  players       Player[]
  teamStats     TeamStats[]
  homeMatches   Match[]        @relation("HomeTeam")
  awayMatches   Match[]        @relation("AwayTeam")
  fromTransfers Transfer[]     @relation("FromTeam")
  toTransfers   Transfer[]     @relation("ToTeam")
}

model Player {
  id          String             @id @default(uuid())
  name        String
  age         Int
  nationality String
  position    Position
  team        Team?              @relation(fields: [teamId], references: [id])
  teamId      String?
  events      MatchEvent[]
  injuries    Injury[]
  stats       PlayerStatistic[]
  transfers   Transfer[]
}

model Match {
  id         String          @id @default(uuid())
  date       DateTime
  location   String
  homeTeam   Team            @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId String
  awayTeam   Team            @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId String
  league     League?         @relation(fields: [leagueId], references: [id])
  leagueId   String?
  events     MatchEvent[]
  stats      PlayerStatistic[]
}

model MatchEvent {
  id         String        @id @default(uuid())
  type       String
  minute     Int
  match      Match         @relation(fields: [matchId], references: [id])
  matchId    String
  player     Player?       @relation(fields: [playerId], references: [id])
  playerId   String?
  details    String?
}

model League {
  id         String       @id @default(uuid())
  name       String       @unique
  country    String
  matches    Match[]
  standings  TeamStats[]
}

model TeamStats {
  id         String      @id @default(uuid())
  team       Team        @relation(fields: [teamId], references: [id])
  teamId     String
  league     League      @relation(fields: [leagueId], references: [id])
  leagueId   String
  wins       Int
  draws      Int
  losses     Int
  points     Int
}

model Transfer {
  id          String       @id @default(uuid())
  player      Player       @relation(fields: [playerId], references: [id])
  playerId    String
  fromTeam    Team         @relation("FromTeam", fields: [fromTeamId], references: [id])
  fromTeamId  String
  toTeam      Team         @relation("ToTeam", fields: [toTeamId], references: [id])
  toTeamId    String
  fee         Int
  date        DateTime
  transferType TransferType
}

model Injury {
  id         String       @id @default(uuid())
  player     Player       @relation(fields: [playerId], references: [id])
  playerId   String
  description String
  date       DateTime
  duration   Int
}

model PlayerStatistic {
  id         String       @id @default(uuid())
  player     Player       @relation(fields: [playerId], references: [id])
  playerId   String
  match      Match        @relation(fields: [matchId], references: [id])
  matchId    String
  goals      Int
  assists    Int
  passes     Int
  tackles    Int
  saves      Int
}

enum Role {
  NORMAL
  ADMIN
  SUPER_ADMIN
}

enum Position {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  ATTACKER
}

enum TransferType {
  PERMANENT
  LOAN
  FREE
}
